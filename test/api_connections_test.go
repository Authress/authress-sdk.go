/*
Authress

Testing ConnectionsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package authress

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "//"
)

func Test_authress_ConnectionsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ConnectionsAPIService CreateConnection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ConnectionsAPI.CreateConnection(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConnectionsAPIService DeleteConnection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var connectionId string

		httpRes, err := apiClient.ConnectionsAPI.DeleteConnection(context.Background(), connectionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConnectionsAPIService GetConnection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var connectionId string

		resp, httpRes, err := apiClient.ConnectionsAPI.GetConnection(context.Background(), connectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConnectionsAPIService GetConnectionCredentials", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var connectionId string
		var userId UserId

		resp, httpRes, err := apiClient.ConnectionsAPI.GetConnectionCredentials(context.Background(), connectionId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConnectionsAPIService GetConnections", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ConnectionsAPI.GetConnections(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConnectionsAPIService UpdateConnection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var connectionId string

		resp, httpRes, err := apiClient.ConnectionsAPI.UpdateConnection(context.Background(), connectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
