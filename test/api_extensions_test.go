/*
Authress

Testing ExtensionsApi

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package test

import (
	"context"
	"net/url"
	"testing"

	authress "github.com/authress/authress-sdk.go"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_authress_ExtensionsApi(t *testing.T) {

	url, _ := url.Parse("https://authress.company.com")
	authressClient := authress.NewAuthressClient(authress.AuthressSettings{
		AuthressApiUrl: url,
	})

	t.Run("Test ExtensionsApi CreateExtension", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := authressClient.Extensions.CreateExtension(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExtensionsApi DeleteExtension", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var extensionId string

		httpRes, err := authressClient.Extensions.DeleteExtension(context.Background(), extensionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExtensionsApi GetExtension", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var extensionId string

		resp, httpRes, err := authressClient.Extensions.GetExtension(context.Background(), extensionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExtensionsApi GetExtensions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := authressClient.Extensions.GetExtensions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExtensionsApi Login", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := authressClient.Extensions.Login(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExtensionsApi RequestToken", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := authressClient.Extensions.RequestToken(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ExtensionsApi UpdateExtension", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var extensionId string

		resp, httpRes, err := authressClient.Extensions.UpdateExtension(context.Background(), extensionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
