/*
Authress

Testing UserPermissionsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package authress

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "//"
)

func Test_authress_UserPermissionsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test UserPermissionsAPIService AuthorizeUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId UserId
		var resourceUri string
		var permission Action

		httpRes, err := apiClient.UserPermissionsAPI.AuthorizeUser(context.Background(), userId, resourceUri, permission).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserPermissionsAPIService GetUserPermissionsForResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId UserId
		var resourceUri string

		resp, httpRes, err := apiClient.UserPermissionsAPI.GetUserPermissionsForResource(context.Background(), userId, resourceUri).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserPermissionsAPIService GetUserResources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId UserId

		resp, httpRes, err := apiClient.UserPermissionsAPI.GetUserResources(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserPermissionsAPIService GetUserRolesForResource", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId UserId
		var resourceUri string

		resp, httpRes, err := apiClient.UserPermissionsAPI.GetUserRolesForResource(context.Background(), userId, resourceUri).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
