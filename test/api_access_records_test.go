/*
Authress

Testing AccessRecordsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package authress

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "//"
)

func Test_authress_AccessRecordsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AccessRecordsAPIService CreateClaim", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccessRecordsAPI.CreateClaim(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccessRecordsAPIService CreateRecord", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccessRecordsAPI.CreateRecord(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccessRecordsAPIService CreateRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccessRecordsAPI.CreateRequest(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccessRecordsAPIService DeleteRecord", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var recordId string

		httpRes, err := apiClient.AccessRecordsAPI.DeleteRecord(context.Background(), recordId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccessRecordsAPIService DeleteRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var requestId string

		httpRes, err := apiClient.AccessRecordsAPI.DeleteRequest(context.Background(), requestId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccessRecordsAPIService GetRecord", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var recordId string

		resp, httpRes, err := apiClient.AccessRecordsAPI.GetRecord(context.Background(), recordId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccessRecordsAPIService GetRecords", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccessRecordsAPI.GetRecords(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccessRecordsAPIService GetRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var requestId string

		resp, httpRes, err := apiClient.AccessRecordsAPI.GetRequest(context.Background(), requestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccessRecordsAPIService GetRequests", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccessRecordsAPI.GetRequests(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccessRecordsAPIService RespondToAccessRequest", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var requestId string

		resp, httpRes, err := apiClient.AccessRecordsAPI.RespondToAccessRequest(context.Background(), requestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccessRecordsAPIService UpdateRecord", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var recordId string

		httpRes, err := apiClient.AccessRecordsAPI.UpdateRecord(context.Background(), recordId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
